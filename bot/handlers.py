from aiogram import Router, F, types
from aiogram.types import Message
from aiogram.filters import Command
from datetime import datetime, timedelta
from keyboards import main_menu
from database import start_shift, end_shift, get_shifts

router = Router()

@router.message(F.text == "/start") 
async def start_command(message: Message):
    await message.answer("–í—ñ—Ç–∞—é! –¶–µ —Ç—Ä–µ–∫–µ—Ä —Ä–æ–±–æ—á–æ–≥–æ —á–∞—Å—É. –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=main_menu)

def register_handlers(dp):
    dp.include_router(router)

@router.message(F.text == "‚è≥ –ü–æ—á–∞—Ç–∏ –∑–º—ñ–Ω—É")
async def start_shift_handler(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ—á–∞—Ç–∫—É –∑–º—ñ–Ω–∏."""
    user_id = message.from_user.id
    start_time, start_day = start_shift(user_id)
    await message.answer(f"‚úÖ –ó–º—ñ–Ω–∞ —Ä–æ–∑–ø–æ—á–∞—Ç–∞!\nüìÖ –î–µ–Ω—å: {start_day}\nüïí –ß–∞—Å: {start_time}")

@router.message(F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–º—ñ–Ω—É")
async def end_shift_handler(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–º—ñ–Ω–∏."""
    user_id = message.from_user.id
    end_time = end_shift(user_id)
    if end_time:
        await message.answer(f"‚úÖ –ó–º—ñ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\nüïí –ß–∞—Å: {end_time}")
    else:
        await message.answer("‚ùå –í–∏ –Ω–µ –ø–æ—á–∏–Ω–∞–ª–∏ –∑–º—ñ–Ω—É!")

@router.message(F.text == "üìä –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–º—ñ–Ω–∏")
async def shifts_handler(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–º—ñ–Ω –∑ –Ω—É–º–µ—Ä–∞—Ü—ñ—î—é –≤ –º–µ–∂–∞—Ö —Ç–∏–∂–Ω—è."""
    user_id = message.from_user.id
    shifts = get_shifts(user_id)

    if not shifts:
        await message.answer("‚ÑπÔ∏è –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å–∞–Ω–∏—Ö –∑–º—ñ–Ω.")
        return

    
    shifts_by_week = {}
    
    for start, day, end in shifts:
        
        start_dt = datetime.strptime(day, "%Y-%m-%d")
        week_start = start_dt - timedelta(days=start_dt.weekday())  
    
        if week_start not in shifts_by_week:
            shifts_by_week[week_start] = []
        shifts_by_week[week_start].append((start, day, end))

    text = "üìã *–í–∞—à—ñ –∑–º—ñ–Ω–∏ –ø–æ —Ç–∏–∂–Ω—è—Ö:*\n\n"

    for week_start, week_shifts in sorted(shifts_by_week.items(), reverse=True):
        text += f"üìÖ *–¢–∏–∂–¥–µ–Ω—å: {week_start.strftime('%d.%m.%y')} - {(week_start + timedelta(days=6)).strftime('%d.%m.%y')}*\n"

        for index, (start, day, end) in enumerate(week_shifts, start=1):
            day_name = datetime.strptime(day, "%Y-%m-%d").strftime("%A")  
            text += f"  üîπ {day_name} ({day}) ‚Äî –ó–º—ñ–Ω–∞ #{index}: {start} - {end or '‚ùå –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'}\n"

        text += "\n"

    await message.answer(text, parse_mode="Markdown")
