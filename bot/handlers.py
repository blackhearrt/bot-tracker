from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.filters import Command
from datetime import datetime, timedelta
from keyboards import main_menu, active_shift_menu, paused_shift_menu
from database import start_shift, end_shift, get_shifts, delete_last_shift, pause_shift, resume_shift

router = Router()

@router.message(F.text == "/start") 
async def start_command(message: Message):
    await message.answer("–í—ñ—Ç–∞—é! –¶–µ —Ç—Ä–µ–∫–µ—Ä —Ä–æ–±–æ—á–æ–≥–æ —á–∞—Å—É. –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=main_menu)

def register_handlers(dp):
    dp.include_router(router)

@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_button_handler(message: Message, state: FSMContext):
    user_data = await state.get_data()
    previous_menu = user_data.get("previous_menu", "main")

    if previous_menu == "main":
        await message.answer("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", reply_markup=main_menu())
    elif previous_menu == "shift":
        await message.answer("üîÑ –ú–µ–Ω—é –∑–º—ñ–Ω–∏", reply_markup=active_shift_menu())
    
    # –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é, —â–æ–± –ø—Ä–∏ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É "–ù–∞–∑–∞–¥" –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏—Å—è –≤ —Ç–æ–π —Å–∞–º–∏–π –ø—É–Ω–∫—Ç
    await state.update_data(previous_menu="main")

@router.message(F.text == "‚è≥ –ü–æ—á–∞—Ç–∏ –∑–º—ñ–Ω—É")
async def start_shift_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ—á–∞—Ç–∫—É –∑–º—ñ–Ω–∏."""
    user_id = message.from_user.id
    start_time, start_day = start_shift(user_id)
    
    if start_time:
        await state.update_data(previous_menu="main")
        await message.answer(f"‚úÖ –ó–º—ñ–Ω–∞ —Ä–æ–∑–ø–æ—á–∞—Ç–∞!\nüìÖ –î–µ–Ω—å: {start_day}\nüïí –ß–∞—Å: {start_time}", reply_markup=active_shift_menu)
    else:
        await message.answer("‚ùå –í–∏ –≤–∂–µ –º–∞—î—Ç–µ –∞–∫—Ç–∏–≤–Ω—É –∑–º—ñ–Ω—É!", reply_markup=active_shift_menu)

@router.message(F.text == "‚è∏ –ü—Ä–∏–∑—É–ø–∏–Ω–∏—Ç–∏ –∑–º—ñ–Ω—É")
async def pause_shift_handler(message: types.Message):
    """–ü—Ä–∏–∑—É–ø–∏–Ω—è—î –∑–º—ñ–Ω—É."""
    user_id = message.from_user.id
    pause_time = pause_shift(user_id)
    
    if pause_time:
        await message.answer(f"‚è∏ –ó–º—ñ–Ω–∞ –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–∞ –æ {pause_time}.", reply_markup=paused_shift_menu)
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –∑–º—ñ–Ω–∏ –∞–±–æ –∑–º—ñ–Ω–∞ –≤–∂–µ –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–∞!")

@router.message(F.text == "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∑–º—ñ–Ω—É")
async def resume_shift_handler(message: types.Message):
    """–ü—Ä–æ–¥–æ–≤–∂—É—î –∑–º—ñ–Ω—É –ø—ñ—Å–ª—è –ø–∞—É–∑–∏."""
    user_id = message.from_user.id
    total_pause_time = resume_shift(user_id)
    
    if total_pause_time is not None:
        await message.answer(f"‚ñ∂Ô∏è –ó–º—ñ–Ω–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–∞! –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –ø–∞—É–∑: {total_pause_time // 60} —Ö–≤–∏–ª–∏–Ω.", reply_markup=active_shift_menu)
    else:
        await message.answer("‚ùå –í–∏ –Ω–µ –ø—Ä–∏–∑—É–ø–∏–Ω—è–ª–∏ –∑–º—ñ–Ω—É –∞–±–æ –≤–æ–Ω–∞ –≤–∂–µ —Ç—Ä–∏–≤–∞—î!")



@router.message(F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–º—ñ–Ω—É")
async def end_shift_handler(message: types.Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à—É—î –∑–º—ñ–Ω—É."""
    user_id = message.from_user.id
    shift_info = end_shift(user_id)
    
    if shift_info:
        start_time, end_time, total_time = shift_info
        await state.update_data(previous_menu="shift")
        await message.answer(
            f"‚úÖ –ó–º—ñ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"üï∞ –ü–æ—á–∞—Ç–æ–∫: {start_time}\n"
            f"üèÅ –ö—ñ–Ω–µ—Ü—å: {end_time}\n"
            f"‚è≥ –ó–∞–≥–∞–ª—å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {total_time // 60} —Ö–≤–∏–ª–∏–Ω.",
            reply_markup=main_menu
        )
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –∑–º—ñ–Ω–∏!", reply_markup=main_menu)

@router.message(F.text == "üìä –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–º—ñ–Ω–∏")
async def shifts_handler(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–º—ñ–Ω –∑ –Ω—É–º–µ—Ä–∞—Ü—ñ—î—é –≤ –º–µ–∂–∞—Ö —Ç–∏–∂–Ω—è."""
    user_id = message.from_user.id
    shifts = get_shifts(user_id)

    if not shifts:
        await message.answer("‚ÑπÔ∏è –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å–∞–Ω–∏—Ö –∑–º—ñ–Ω.")
        return

    
    shifts_by_week = {}
    
    for start, day, end in shifts:
        
        start_dt = datetime.strptime(day, "%Y-%m-%d")
        week_start = start_dt - timedelta(days=start_dt.weekday())  
    
        if week_start not in shifts_by_week:
            shifts_by_week[week_start] = []
        shifts_by_week[week_start].append((start, day, end))

    text = "üìã *–í–∞—à—ñ –∑–º—ñ–Ω–∏ –ø–æ —Ç–∏–∂–Ω—è—Ö:*\n\n"

    for week_start, week_shifts in sorted(shifts_by_week.items(), reverse=True):
        text += f"üìÖ *–¢–∏–∂–¥–µ–Ω—å: {week_start.strftime('%d.%m.%y')} - {(week_start + timedelta(days=6)).strftime('%d.%m.%y')}*\n"

        for index, (start, day, end) in enumerate(week_shifts, start=1):
            day_name = datetime.strptime(day, "%Y-%m-%d").strftime("%A")  
            text += f"  üîπ {day_name} ({day}) ‚Äî –ó–º—ñ–Ω–∞ #{index}: {start} - {end or '‚ùå –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'}\n"

        text += "\n"

    await state.update_data(previous_menu="main")
    await message.answer(text, parse_mode="Markdown")

@router.message(F.text == "üóë –í–∏–¥–∞–ª–∏—Ç–∏ –∑–º—ñ–Ω—É")
async def delete_shift_handler(message: types.Message):
    """–í–∏–¥–∞–ª–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∑–º—ñ–Ω–∏."""
    user_id = message.from_user.id
    result = delete_last_shift(user_id)
    
    if result:
        await message.answer("‚úÖ –û—Å—Ç–∞–Ω–Ω—é –∑–º—ñ–Ω—É —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∑–º—ñ–Ω –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")