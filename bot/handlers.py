from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.filters import Command
from datetime import datetime, timedelta
from keyboards import main_menu, active_shift_menu, paused_shift_menu
from database import start_shift, end_shift, get_shifts, delete_last_shift, pause_shift, resume_shift, get_shift_status
from utils import format_time, calculate_end_time, get_remaining_time

router = Router()

@router.message(F.text == "/start") 
async def start_command(message: Message):
    await message.answer("–í—ñ—Ç–∞—é! –¶–µ —Ç—Ä–µ–∫–µ—Ä —Ä–æ–±–æ—á–æ–≥–æ —á–∞—Å—É. –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=main_menu)

def register_handlers(dp):
    dp.include_router(router)

@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_button_handler(message: Message, state: FSMContext):
    user_data = await state.get_data()
    previous_menu = user_data.get("previous_menu", "main")

    if previous_menu == "main":
        await message.answer("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", reply_markup=main_menu)
    elif previous_menu == "shift":
        await message.answer("üîÑ –ú–µ–Ω—é –∑–º—ñ–Ω–∏", reply_markup=active_shift_menu)
    
    # –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é, —â–æ–± –ø—Ä–∏ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É "–ù–∞–∑–∞–¥" –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏—Å—è –≤ —Ç–æ–π —Å–∞–º–∏–π –ø—É–Ω–∫—Ç
    await state.update_data(previous_menu="main")

@router.message(F.text == "‚è≥ –ü–æ—á–∞—Ç–∏ –∑–º—ñ–Ω—É")
async def start_shift_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ—á–∞—Ç–∫—É –∑–º—ñ–Ω–∏."""
    user_id = message.from_user.id
    start_time, start_day = start_shift(user_id)
    
    if start_time:
        await state.update_data(previous_menu="main")
        await message.answer(f"‚úÖ –ó–º—ñ–Ω–∞ —Ä–æ–∑–ø–æ—á–∞—Ç–∞!\nüìÖ –î–µ–Ω—å: {start_day}\nüïí –ß–∞—Å: {start_time}", reply_markup=active_shift_menu)
    else:
        await message.answer("‚ùå –í–∏ –≤–∂–µ –º–∞—î—Ç–µ –∞–∫—Ç–∏–≤–Ω—É –∑–º—ñ–Ω—É!", reply_markup=active_shift_menu)

@router.message(F.text == "‚è∏ –ü—Ä–∏–∑—É–ø–∏–Ω–∏—Ç–∏ –∑–º—ñ–Ω—É")
async def pause_shift_handler(message: types.Message):
    user_id = message.from_user.id
    pause_time = pause_shift(user_id)  # –ó–∞–ø–∏—Å—É—î–º–æ –ø–æ—á–∞—Ç–æ–∫ –ø–∞—É–∑–∏

    if pause_time:
        dt = datetime.strptime(pause_time, "%Y-%m-%d %H:%M:%S")
        formatted_time = dt.strftime("%H:%M, %d.%m.%Y")

        await message.answer(
            f"‚è∏Ô∏è –ó–º—ñ–Ω–∞ –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–∞ –æ {formatted_time}.",
            reply_markup=paused_shift_menu
        )
    else:
        await message.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –∑–º—ñ–Ω–∞ –Ω–µ –±—É–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ—é –∞–±–æ –≤–∂–µ –Ω–∞ –ø–∞—É–∑—ñ.")


@router.message(F.text == "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∑–º—ñ–Ω—É")
async def resume_shift_handler(message: types.Message):
    user_id = message.from_user.id
    result = resume_shift(user_id)  # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –ø–∞—É–∑–∏, –∑–∞–ª–∏—à–∫–æ–≤–∏–π —á–∞—Å —Ç–∞ —á–∞—Å –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è

    if result is not None:
        pause_duration, remaining_time, resume_time_str = result
        time_text = format_time(pause_duration)
        remaining_text = format_time(remaining_time)
        estimated_end_time = calculate_end_time(remaining_time, resume_time_str)

        await message.answer(
            f"‚ñ∂Ô∏è –ó–º—ñ–Ω–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–∞!\n"
            f"‚è∏ –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å —É –ø–∞—É–∑—ñ: {time_text}.\n"
            f"üïí –ó–∞–ª–∏—à–∏–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞—Ü—é–≤–∞—Ç–∏: {remaining_text} (–æ—Ä—ñ—î–Ω—Ç–æ–≤–Ω–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –æ {estimated_end_time}).",
            reply_markup=active_shift_menu
        )
    else:
        await message.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –∑–º—ñ–Ω–∏ –∞–±–æ –∑–º—ñ–Ω–∞ –Ω–µ –±—É–ª–∞ –Ω–∞ –ø–∞—É–∑—ñ.")

@router.message(F.text == "‚è≥ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞–ª–∏—à–æ–∫ —á–∞—Å—É –¥–ª—è –≤—ñ–¥–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è")
async def check_remaining_time_handler(message: types.Message):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –∑–∞–ª–∏—à–æ–∫ —á–∞—Å—É –¥–æ 5 —ñ 10 –≥–æ–¥–∏–Ω —Ä–æ–±–æ—Ç–∏."""
    user_id = message.from_user.id
    remaining_time = get_remaining_time(user_id)

    if remaining_time is None:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –∑–º—ñ–Ω–∏!", reply_markup=main_menu)
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–∏ (active / paused)
    shift_status = get_shift_status(user_id)

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —è–∫–µ –º–µ–Ω—é –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏
    reply_markup = active_shift_menu if shift_status == "active" else paused_shift_menu

    time_to_5h, time_to_10h = remaining_time

    def format_time(seconds):
        hours = seconds // 3600
        minutes = (seconds % 3600) // 60
        return f"{hours} –≥–æ–¥ {minutes} —Ö–≤" if seconds > 0 else "‚è≥ –í–∂–µ –≤—ñ–¥–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ"

    await message.answer(
        f"‚è≥ –ß–∞—Å –¥–æ 5 –≥–æ–¥–∏–Ω: {format_time(time_to_5h)}\n"
        f"‚è≥ –ß–∞—Å –¥–æ 10 –≥–æ–¥–∏–Ω: {format_time(time_to_10h)}",
        reply_markup=reply_markup
    )


@router.message(F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–º—ñ–Ω—É")
async def end_shift_handler(message: types.Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à—É—î –∑–º—ñ–Ω—É –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø–∞—É–∑."""
    user_id = message.from_user.id
    shift_info = end_shift(user_id)  # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –∑–º—ñ–Ω—É
    
    if not shift_info or not isinstance(shift_info, tuple) or len(shift_info) != 4:
        print(f"–ü–æ–º–∏–ª–∫–∞: –æ—á—ñ–∫—É–≤–∞–ª–æ—Å—è 4 –∑–Ω–∞—á–µ–Ω–Ω—è, –æ—Ç—Ä–∏–º–∞–Ω–æ {len(shift_info) if shift_info else 'None'} - {shift_info}")
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –∑–º—ñ–Ω–∏!", reply_markup=main_menu)
        return

    start_time, end_time, total_time, pause_time = shift_info

    # –§–æ—Ä–º–∞—Ç—É—î–º–æ —á–∞—Å –ø–æ—á–∞—Ç–∫—É —ñ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–º—ñ–Ω–∏
    if len(start_time) == 8:  
        start_time = datetime.now().strftime("%Y-%m-%d") + " " + start_time  # –î–æ–¥–∞—î–º–æ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—é –¥–∞—Ç—É

    start_dt = datetime.strptime(start_time, "%d.%m.%Y –æ %H:%M:%S")
    end_dt = datetime.strptime(end_time, "%d.%m.%Y –æ %H:%M:%S")

    formatted_start = start_dt.strftime("%d.%m.%Y –æ %H:%M")
    formatted_end = end_dt.strftime("%d.%m.%Y –æ %H:%M")

    # –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –∑–º—ñ–Ω–∏ –±–µ–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –ø–∞—É–∑
    total_seconds = int((end_dt - start_dt).total_seconds() - pause_time)

    # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∑–º—ñ–Ω–∏
    def format_duration(seconds):
        if seconds < 60:
            return f"{seconds} —Å–µ–∫—É–Ω–¥"
        elif seconds < 3600:
            minutes = seconds // 60
            seconds %= 60
            return f"{minutes} —Ö–≤ {seconds} —Å–µ–∫"
        elif seconds < 86400:
            hours = seconds // 3600
            minutes = (seconds % 3600) // 60
            seconds %= 60
            return f"{hours} –≥–æ–¥ {minutes} —Ö–≤ {seconds} —Å–µ–∫"
        else:
            days = seconds // 86400
            hours = (seconds % 86400) // 3600
            minutes = (seconds % 3600) // 60
            seconds %= 60
            return f"{days} –¥ {hours} –≥–æ–¥ {minutes} —Ö–≤ {seconds} —Å–µ–∫"

    total_time_str = format_duration(total_seconds)
    pause_time_str = format_duration(pause_time)

    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await state.update_data(previous_menu="shift")
    await message.answer(
        f"‚úÖ –ó–º—ñ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"üï∞ –ü–æ—á–∞—Ç–æ–∫: {formatted_start}\n"
        f"üèÅ –ö—ñ–Ω–µ—Ü—å: {formatted_end}\n"
        f"‚è≥ –ß–∏—Å—Ç–∏–π —Ä–æ–±–æ—á–∏–π —á–∞—Å: {total_time_str}.\n"
        f"‚è∏ –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å —É –ø–∞—É–∑—ñ: {pause_time_str}.",
        reply_markup=main_menu
    )

@router.message(F.text == "üìä –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–º—ñ–Ω–∏")
async def shifts_handler(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–º—ñ–Ω –∑ –Ω—É–º–µ—Ä–∞—Ü—ñ—î—é –≤ –º–µ–∂–∞—Ö —Ç–∏–∂–Ω—è."""
    user_id = message.from_user.id
    shifts = get_shifts(user_id)

    if not shifts:
        await message.answer("‚ÑπÔ∏è –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å–∞–Ω–∏—Ö –∑–º—ñ–Ω.")
        return

    
    shifts_by_week = {}
    
    for start, day, end in shifts:
        
        start_dt = datetime.strptime(day, "%Y-%m-%d")
        week_start = start_dt - timedelta(days=start_dt.weekday())  
    
        if week_start not in shifts_by_week:
            shifts_by_week[week_start] = []
        shifts_by_week[week_start].append((start, day, end))

    text = "üìã *–í–∞—à—ñ –∑–º—ñ–Ω–∏ –ø–æ —Ç–∏–∂–Ω—è—Ö:*\n\n"

    for week_start, week_shifts in sorted(shifts_by_week.items(), reverse=True):
        text += f"üìÖ *–¢–∏–∂–¥–µ–Ω—å: {week_start.strftime('%d.%m.%y')} - {(week_start + timedelta(days=6)).strftime('%d.%m.%y')}*\n"

        for index, (start, day, end) in enumerate(week_shifts, start=1):
            day_name = datetime.strptime(day, "%Y-%m-%d").strftime("%A")  
            text += f"  üîπ {day_name} ({day}) ‚Äî –ó–º—ñ–Ω–∞ #{index}: {start} - {end or '‚ùå –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'}\n"

        text += "\n"

    await state.update_data(previous_menu="main")
    await message.answer(text, parse_mode="Markdown")

@router.message(F.text == "üóë –í–∏–¥–∞–ª–∏—Ç–∏ –∑–º—ñ–Ω—É")
async def delete_shift_handler(message: types.Message):
    """–í–∏–¥–∞–ª–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∑–º—ñ–Ω–∏."""
    user_id = message.from_user.id
    result = delete_last_shift(user_id)
    
    if result:
        await message.answer("‚úÖ –û—Å—Ç–∞–Ω–Ω—é –∑–º—ñ–Ω—É —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∑–º—ñ–Ω –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")